#!/usr/bin/env node
/*eslint no-process-exit:0 */
'use strict';

var argv = require('minimist')(process.argv.slice(2));
var pkg = require('../package');
var util = require('util');
var mkdirp = require('mkdirp');
var path = require('path');
var LOTS = require('../lib/lots');
var formatter = require('../lib/formatter');
var port = 5000;
var defaultIgnores = [
  'node_modules/*'
];
var Spinner = require('cli-spinner').Spinner;

function help() {
  var usage = []
    .concat(pkg.name + ' ' + pkg.version)
    .concat('')
    .concat(pkg.description)
    .concat('')
    .concat('-i, --ignore <pattern> a pattern to ignore (repeatable)')
    .concat('-a, --all no default ignore patterns, default ignores: \'' + defaultIgnores.join('\', \'') + '\'')
    .concat('-c, --cache <cache> directory to use for filesystem cache, defaults to /tmp/LOTS')
    .concat('-d, --directory <directory> directory to start LOTS, defaults to pwd')
    .concat('-t, --todos whether to search code for TODOs as well as bang tags')
    .concat('-g, --group <tag|file|none> how to group results for cli output')
    .concat('-s, --server start a LOTS server to view results')
    .concat('-p, --port [port] port to run on, default is ' + port)
    .concat('');
    util.puts(usage.join('\n'));
    process.exit();
}

// check for help
if(argv.help || argv.h || argv._ && argv._.length === 1 && argv._[0] === '?'){
  help();
}

// ! support a .lotsrc for default configs #refactor ^1

argv.ignore = argv.ignore || argv.i || [];
if(!Array.isArray(argv.ignore)) {
  argv.ignore = [argv.ignore];
}

argv.all = argv.all || argv.a;
argv.port = argv.port || argv.p || port;
argv.cache = argv.cache || argv.c;
argv.directory = argv.directory || argv.d;
argv.todos = argv.todos || argv.t || false;
argv.server = argv.server || argv.s || false;

if (!argv.all) {
  argv.ignore = argv.ignore.concat(defaultIgnores);
}

if (argv.cache) {
  argv.cache = path.join(process.cwd(), argv.cache);
} else {
  argv.cache = '/tmp/LOTS';
}

if (argv.directory) {
  argv.directory = path.join(process.cwd(), argv.directory);
} else {
  argv.directory = process.cwd();
}

argv.exclude = '';
if(argv.ignore) {
  argv.ignore.forEach(function(ignore){
    argv.exclude += ' --exclude \'' + ignore + '\'';
  });
}
mkdirp.sync(argv.cache);

if(process.stdout.isTTY) {
  var spinner = new Spinner('Finding tickets.. %s');
  spinner.setSpinnerString('⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏');
  spinner.start();
}

(function(){
  if(argv.server) {
    require('../server')(argv);
  }
}());

var lots = LOTS(argv);
lots.generate(function(err, data) {
  if(spinner) {
    spinner.stop(true);
  }
  if(err) {
    console.warn(err);
    process.exit(1);
  }

  if(argv.server) {
    lots.log();
  } else {
    argv.group = argv.group || 'tag';
    if(!formatter[argv.group]) {
      argv.group = 'tag';
    }
    formatter[argv.group](argv, data);
  }
});
