#!/usr/bin/env node
/* eslint no-process-exit:0 */
'use strict';

var argv = require('minimist')(process.argv.slice(2));
var pkg = require('../package');
var path = require('path');
var LOTS = require('../lib/lots');
var tickets = require('../lib/tickets');
var defaultIgnores = [
  '!**/node_modules/**'
];
var Spinner = require('cli-spinner').Spinner;

function help () {
  var usage = []
    .concat(pkg.name + ' ' + pkg.version)
    .concat('')
    .concat(pkg.description)
    .concat('')
    .concat('-g, --glob <pattern> a pattern to glob (repeatable)')
    .concat('-a, --all no default ignore patterns, default ignores: \'' + defaultIgnores.join('\', \'') + '\'')
    .concat('-d, --directory <directory> directory to start LOTS, defaults to current directory')
    .concat('-t, --todos whether to search code for TODOs as well as bang tags')
    .concat('-b, --by group results by <tag|file|priority>')
    .concat('');
  console.log(usage.join('\n'));
  process.exit();
}

// check for help
if (argv.help || argv.h || (argv._ && argv._.length === 1 && argv._[0] === '?')) {
  help();
}

// mix in defaults to any lotsrc file
argv = require('rc')(pkg.name, {
  glob: argv.glob || argv.g || [],
  all: argv.all || argv.a,
  directory: argv.directory || argv.d,
  todos: argv.todos || argv.t || false,
  by: argv.by || argv.b || 'tag'
});

if (argv.glob) {
  argv.glob = typeof argv.glob === 'string' ? [argv.glob] : argv.glob;
}

if (!argv.all) {
  argv.glob = argv.glob.concat(defaultIgnores);
}

if (argv.directory) {
  argv.directory = path.join(process.cwd(), argv.directory);
} else {
  argv.directory = process.cwd();
}

// targets to search
argv.targets = argv._.join(' ');

if (process.stdout.isTTY) {
  var spinner = new Spinner('Finding tickets.. %s');
  spinner.setSpinnerString('⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏');
  spinner.start();
}

var lots = LOTS(argv);
lots.generate(function (err, data) {
  if (spinner) {
    spinner.stop(true);
  }
  if (err) {
    console.warn(err);
    process.exit(1);
  }

  argv.by = argv.by || 'tag';
  if (!tickets[argv.by]) {
    argv.by = 'tag';
  }
  argv.cli = true;
  tickets[argv.by](argv, data);
});
