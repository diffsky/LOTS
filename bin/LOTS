#!/usr/bin/env node
/*eslint no-process-exit:0 */
'use strict';

var program = require('commander');
var mkdirp = require('mkdirp');
var server = require('../server');
var path = require('path');
var LOTS = require('../lib/lots');
var port = 5000;
var defaultIgnores = [
  'node_modules'
];

function ignore(val, memo) {
  memo.push(val);
  return memo;
}

program
  .version(require('../package').version)
  .option('-i, --ignore [directory]', 'a directory to ignore (repeatable)', ignore, [])
  .option('-a, -all', 'no default ignore directories, default ignores: ' + defaultIgnores)
  .option('-p, --port [port]', 'port to run on, default is ' + port)
  .option('-c, --cache [cache]', 'directory to use for filesystem cache, defaults to /tmp/LOTS')
  .option('-d, --directory [directory]', 'directory to start LOTS, defaults to pwd')
  .option('-t, --todos', 'whether to search code for TODOs as well as bang tags');

program.on('--help', function(){
  console.log('  LOTS server');
});

program.parse(process.argv);

if(!program.all) {
  program.ignore = program.ignore.concat(defaultIgnores);
}

var config = {};
config.port = program.port || port;
config.todos = program.todos || false;
config.ignore = program.ignore || false;
if (program.cache) {
  config.cache = path.join(process.cwd(), program.cache);
} else {
  config.cache = '/tmp/LOTS';
}
if (program.directory) {
  config.directory = path.join(process.cwd(), program.directory);
} else {
  config.directory = process.cwd();
}
config.exclude = '';

if(config.ignore) {
  config.ignore.forEach(function(ignore){
    config.exclude += ' --exclude-dir ' + ignore;
  });
}
mkdirp.sync(config.cache);

server(config);

var lots = LOTS(config);
lots.generate(function(err) {
  if(err) {
    console.warn(err);
    process.exit(1);
  }
  lots.log();
});
